// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GameOfLife2.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("GameOfLifeInitializationFeature1")]
    public partial class GameOfLifeInitializationFeature1Feature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GameOfLifeInitializationFeature1.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "GameOfLifeInitializationFeature1", @"The universe of the Game of Life is an infinite two-dimensional orthogonal grid of square cells, each of which is in
one of two possible states, alive or dead. Every cell interacts with its eight neighbours, which are the cells that
are horizontally, vertically, or diagonally adjacent. At each step in time, the following transitions occur:
1. Any live cell with fewer than two live neighbours dies, as if caused by under-population.
2. Any live cell with two or three live neighbours lives on to the next generation.
3. Any live cell with more than three live neighbours dies, as if by overcrowding.
4. Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.
The initial pattern constitutes the seed of the system. The first generation is created by applying the above rules
simultaneously to every cell in the seed—births and deaths occur simultaneously, and the discrete moment at which
this happens is sometimes called a tick (in other words, each generation is a pure function of the preceding one).
The rules continue to be applied repeatedly to create further generations.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Initializing a GameGrid with no configuration")]
        public virtual void InitializingAGameGridWithNoConfiguration()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Initializing a GameGrid with no configuration", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("I start the Game Of Life", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
 testRunner.When("I create a GameGrid 10 cells wide by 10 cells high", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
 testRunner.Then("the number of cells along the first dimension of the GameGrid will be 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 18
 testRunner.And("the number of cells along the second dimension of the GameGrid will be 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Initializing a GameGrid with a random seed value of 1")]
        public virtual void InitializingAGameGridWithARandomSeedValueOf1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Initializing a GameGrid with a random seed value of 1", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.Given("I start the Game Of Life", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
 testRunner.When("I create a GameGrid 10 cells wide by 10 cells high with a seeded random configura" +
                    "tion of 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
 testRunner.Then("the cell in position 0, 3 has a state of true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 24
 testRunner.And("the cell in position 0, 0 has 3 neighbours", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
 testRunner.And("the cell in position 1, 1 has 8 neighbours", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.And("the cell in position 9, 1 has 5 neighbours", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Checking for the first rule after initialising the GameGrid with a specific confi" +
            "guration")]
        public virtual void CheckingForTheFirstRuleAfterInitialisingTheGameGridWithASpecificConfiguration()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Checking for the first rule after initialising the GameGrid with a specific confi" +
                    "guration", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "column0",
                        "column1",
                        "column2"});
            table1.AddRow(new string[] {
                        "false",
                        "false",
                        "false"});
            table1.AddRow(new string[] {
                        "false",
                        "true",
                        "false"});
            table1.AddRow(new string[] {
                        "false",
                        "false",
                        "false"});
#line 29
 testRunner.Given("I start the Game Of Life with a GameGrid with the following Cell state", ((string)(null)), table1, "Given ");
#line 34
 testRunner.When("I apply game rule 1 to the cell in position 1, 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 35
 testRunner.Then("the cell in position 1, 1 has a state of false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Checking for the second rule after initialising the GameGrid with a specific conf" +
            "iguration")]
        public virtual void CheckingForTheSecondRuleAfterInitialisingTheGameGridWithASpecificConfiguration()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Checking for the second rule after initialising the GameGrid with a specific conf" +
                    "iguration", ((string[])(null)));
#line 37
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "column0",
                        "column1",
                        "column2"});
            table2.AddRow(new string[] {
                        "false",
                        "false",
                        "true"});
            table2.AddRow(new string[] {
                        "true",
                        "true",
                        "false"});
            table2.AddRow(new string[] {
                        "false",
                        "true",
                        "false"});
#line 38
 testRunner.Given("I start the Game Of Life with a GameGrid with the following Cell state", ((string)(null)), table2, "Given ");
#line 43
 testRunner.When("I apply game rule 2 to the cell in position 1, 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 44
 testRunner.Then("the cell in position 1, 1 has a state of true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Checking for the third rule after initialising the GameGrid with a specific confi" +
            "guration")]
        public virtual void CheckingForTheThirdRuleAfterInitialisingTheGameGridWithASpecificConfiguration()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Checking for the third rule after initialising the GameGrid with a specific confi" +
                    "guration", ((string[])(null)));
#line 46
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "column0",
                        "column1",
                        "column2"});
            table3.AddRow(new string[] {
                        "false",
                        "false",
                        "true"});
            table3.AddRow(new string[] {
                        "true",
                        "true",
                        "true"});
            table3.AddRow(new string[] {
                        "false",
                        "true",
                        "false"});
#line 47
 testRunner.Given("I start the Game Of Life with a GameGrid with the following Cell state", ((string)(null)), table3, "Given ");
#line 52
 testRunner.When("I apply game rule 3 to the cell in position 1, 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 53
 testRunner.Then("the cell in position 1, 1 has a state of false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Checking for the fourth rule after initialising the GameGrid with a specific conf" +
            "iguration")]
        public virtual void CheckingForTheFourthRuleAfterInitialisingTheGameGridWithASpecificConfiguration()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Checking for the fourth rule after initialising the GameGrid with a specific conf" +
                    "iguration", ((string[])(null)));
#line 55
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "column0",
                        "column1",
                        "column2"});
            table4.AddRow(new string[] {
                        "false",
                        "false",
                        "true"});
            table4.AddRow(new string[] {
                        "true",
                        "false",
                        "false"});
            table4.AddRow(new string[] {
                        "false",
                        "true",
                        "false"});
#line 56
 testRunner.Given("I start the Game Of Life with a GameGrid with the following Cell state", ((string)(null)), table4, "Given ");
#line 61
 testRunner.When("I apply game rule 4 to the cell in position 1, 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 62
 testRunner.Then("the cell in position 1, 1 has a state of true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Iterating the GameGrid after initialising it with a specific configuration")]
        public virtual void IteratingTheGameGridAfterInitialisingItWithASpecificConfiguration()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Iterating the GameGrid after initialising it with a specific configuration", ((string[])(null)));
#line 64
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "column0",
                        "column1",
                        "column2",
                        "column3",
                        "column4"});
            table5.AddRow(new string[] {
                        "false",
                        "false",
                        "false",
                        "true",
                        "false"});
            table5.AddRow(new string[] {
                        "false",
                        "true",
                        "false",
                        "false",
                        "false"});
            table5.AddRow(new string[] {
                        "false",
                        "true",
                        "true",
                        "true",
                        "false"});
            table5.AddRow(new string[] {
                        "false",
                        "false",
                        "true",
                        "true",
                        "false"});
            table5.AddRow(new string[] {
                        "false",
                        "true",
                        "true",
                        "false",
                        "false"});
#line 65
 testRunner.Given("I start the Game Of Life with a GameGrid with the following Cell state", ((string)(null)), table5, "Given ");
#line 72
 testRunner.When("I iterate the GameGrid with all game rules", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 73
 testRunner.Then("the cell in position 1, 1 has a state of true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 74
 testRunner.And("the cell in position 2, 2 has a state of false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
 testRunner.And("the cell in position 0, 3 has a state of false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
 testRunner.And("the cell in position 1, 2 has a state of false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
 testRunner.And("the cell in position 1, 3 has a state of true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
